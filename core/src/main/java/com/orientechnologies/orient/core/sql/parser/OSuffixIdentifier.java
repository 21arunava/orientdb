/* Generated By:JJTree: Do not edit this line. OSuffixIdentifier.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.record.OIdentifiable;
import com.orientechnologies.orient.core.record.impl.ODocument;
import com.orientechnologies.orient.core.sql.executor.AggregationContext;
import com.orientechnologies.orient.core.sql.executor.OResult;
import com.orientechnologies.orient.core.sql.executor.OResultInternal;

import java.util.*;

public class OSuffixIdentifier extends SimpleNode {

  protected OIdentifier      identifier;
  protected ORecordAttribute recordAttribute;
  protected boolean star = false;

  public OSuffixIdentifier(int id) {
    super(id);
  }

  public OSuffixIdentifier(OrientSql p, int id) {
    super(p, id);
  }

  public OSuffixIdentifier(OIdentifier identifier) {
    this.identifier = identifier;
  }

  /**
   * Accept the visitor.
   **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (identifier != null) {
      identifier.toString(params, builder);
    } else if (recordAttribute != null) {
      recordAttribute.toString(params, builder);
    } else if (star) {
      builder.append("*");
    }
  }

  public Object execute(OIdentifiable iCurrentRecord, OCommandContext ctx) {
    if (star) {
      return iCurrentRecord;
    }
    if (identifier != null) {
      String varName = identifier.getStringValue();
      if (ctx != null && ctx.getVariable(varName) != null) {
        return ctx.getVariable(varName);
      }
      if (iCurrentRecord != null) {
        return ((ODocument) iCurrentRecord.getRecord()).field(varName);
      }
      return null;
    }
    if (recordAttribute != null) {
      return ((ODocument) iCurrentRecord.getRecord()).field(recordAttribute.name);
    }
    return null;
  }

  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {
    if (star) {
      return iCurrentRecord;
    }
    if (identifier != null) {
      String varName = identifier.getStringValue();
      if (ctx != null && varName.equalsIgnoreCase("$parent")) {
        return ctx.getParent();
      }
      if (ctx != null && ctx.getVariable(varName) != null) {
        return ctx.getVariable(varName);
      }
      if (iCurrentRecord != null) {
        return iCurrentRecord.getProperty(varName);
      }
      return null;
    }

    if (recordAttribute != null)

    {
      return iCurrentRecord.getProperty(recordAttribute.name);
    }

    return null;
  }

  public Object execute(Map iCurrentRecord, OCommandContext ctx) {
    if (star) {
      OResultInternal result = new OResultInternal();
      if (iCurrentRecord != null) {
        for (Map.Entry<Object, Object> x : ((Map<Object, Object>) iCurrentRecord).entrySet()) {
          result.setProperty("" + x.getKey(), x.getValue());
        }
        return result;
      }
      return iCurrentRecord;
    }
    if (identifier != null) {
      String varName = identifier.getStringValue();
      if (ctx != null && varName.equalsIgnoreCase("$parent")) {
        return ctx.getParent();
      }
      if (ctx != null && ctx.getVariable(varName) != null) {
        return ctx.getVariable(varName);
      }
      if (iCurrentRecord != null) {
        return iCurrentRecord.get(varName);
      }
      return null;
    }
    if (recordAttribute != null) {
      return iCurrentRecord.get(recordAttribute.name);
    }
    return null;
  }

  public Object execute(Iterable iterable, OCommandContext ctx) {
    if (star) {
      return null;
    }
    List<Object> result = new ArrayList<>();
    for (Object o : iterable) {
      result.add(execute(o, ctx));
    }
    return result;
  }

  public Object execute(Iterator iterator, OCommandContext ctx) {
    if (star) {
      return null;
    }
    List<Object> result = new ArrayList<>();
    while (iterator.hasNext()) {
      result.add(execute(iterator.next(), ctx));
    }
    return result;
  }

  public Object execute(OCommandContext iCurrentRecord) {
    if (star) {
      return null;
    }
    if (identifier != null) {
      String varName = identifier.getStringValue();
      if (iCurrentRecord != null) {
        return iCurrentRecord.getVariable(varName);
      }
      return null;
    }
    if (recordAttribute != null) {
      return iCurrentRecord.getVariable(recordAttribute.name);
    }
    return null;
  }

  public Object execute(Object currentValue, OCommandContext ctx) {
    if (currentValue instanceof OResult) {
      return execute((OResult) currentValue, ctx);
    }
    if (currentValue instanceof OIdentifiable) {
      return execute((OIdentifiable) currentValue, ctx);
    }
    if (currentValue instanceof Map) {
      return execute((Map) currentValue, ctx);
    }
    if (currentValue instanceof OCommandContext) {
      return execute((OCommandContext) currentValue);
    }
    if (currentValue instanceof Iterable) {
      return execute((Iterable) currentValue, ctx);
    }
    if (currentValue instanceof Iterator) {
      return execute((Iterator) currentValue, ctx);
    }
    if (currentValue == null) {
      return execute((OResult) null, ctx);
    }

    return null;
    // TODO other cases?
  }

  public boolean isBaseIdentifier() {
    return identifier != null;
  }

  public boolean needsAliases(Set<String> aliases) {
    if (identifier != null) {
      return aliases.contains(identifier.getStringValue());
    }
    if (recordAttribute != null) {
      for (String s : aliases) {
        if (s.equalsIgnoreCase(recordAttribute.name)) {
          return true;
        }
      }
    }
    return false;
  }

  public boolean isAggregate() {
    return false;
  }

  public OSuffixIdentifier splitForAggregation(AggregateProjectionSplit aggregateProj) {
    return this;
  }

  public boolean isEarlyCalculated() {
    if (identifier != null && identifier.internalAlias) {
      return true;
    }
    return false;
  }

  public void aggregate(Object value, OCommandContext ctx) {
    throw new UnsupportedOperationException("this operation does not support plain aggregation: " + toString());
  }

  public AggregationContext getAggregationContext(OCommandContext ctx) {
    throw new UnsupportedOperationException("this operation does not support plain aggregation: " + toString());
  }

  public OSuffixIdentifier copy() {
    OSuffixIdentifier result = new OSuffixIdentifier(-1);
    result.identifier = identifier == null ? null : identifier.copy();
    result.recordAttribute = recordAttribute == null ? null : recordAttribute.copy();
    result.star = star;
    return result;
  }

  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    OSuffixIdentifier that = (OSuffixIdentifier) o;

    if (star != that.star)
      return false;
    if (identifier != null ? !identifier.equals(that.identifier) : that.identifier != null)
      return false;
    if (recordAttribute != null ? !recordAttribute.equals(that.recordAttribute) : that.recordAttribute != null)
      return false;

    return true;
  }

  @Override public int hashCode() {
    int result = identifier != null ? identifier.hashCode() : 0;
    result = 31 * result + (recordAttribute != null ? recordAttribute.hashCode() : 0);
    result = 31 * result + (star ? 1 : 0);
    return result;
  }

  public void extractSubQueries(SubQueryCollector collector) {

  }

  public boolean refersToParent() {
    if (identifier != null && identifier.getStringValue().equalsIgnoreCase("$parent")) {
      return true;
    }
    return false;
  }
}
/* JavaCC - OriginalChecksum=5d9be0188c7d6e2b67d691fb88a518f8 (do not edit this line) */
