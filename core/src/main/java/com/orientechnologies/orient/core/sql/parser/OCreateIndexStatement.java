/* Generated By:JJTree: Do not edit this line. OCreateIndexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class OCreateIndexStatement extends OStatement {

  public static class Property {
    protected OIdentifier      name;
    protected ORecordAttribute recordAttribute;
    protected OIdentifier      className;
    protected boolean byKey   = false;
    protected boolean byValue = false;
    protected OIdentifier collate;

    public Property copy() {
      Property result = new Property();
      result.name = name == null ? null : name.copy();
      result.recordAttribute = recordAttribute == null ? null : recordAttribute.copy();
      result.className = className == null ? null : className.copy();
      result.byKey = byKey;
      result.byValue = byValue;
      result.collate = collate == null ? null : collate.copy();
      return result;
    }

    @Override public boolean equals(Object o) {
      if (this == o)
        return true;
      if (o == null || getClass() != o.getClass())
        return false;

      Property property = (Property) o;

      if (byKey != property.byKey)
        return false;
      if (byValue != property.byValue)
        return false;
      if (name != null ? !name.equals(property.name) : property.name != null)
        return false;
      if (recordAttribute != null ? !recordAttribute.equals(property.recordAttribute) : property.recordAttribute != null)
        return false;
      if (className != null ? !className.equals(property.className) : property.className != null)
        return false;
      if (collate != null ? !collate.equals(property.collate) : property.collate != null)
        return false;

      return true;
    }

    @Override public int hashCode() {
      int result = name != null ? name.hashCode() : 0;
      result = 31 * result + (recordAttribute != null ? recordAttribute.hashCode() : 0);
      result = 31 * result + (className != null ? className.hashCode() : 0);
      result = 31 * result + (byKey ? 1 : 0);
      result = 31 * result + (byValue ? 1 : 0);
      result = 31 * result + (collate != null ? collate.hashCode() : 0);
      return result;
    }
  }

  protected OIndexName  name;
  protected OIdentifier className;
  protected List<Property> propertyList = new ArrayList<Property>();
  protected OIdentifier type;
  protected OIdentifier engine;
  protected List<OIdentifier> keyTypes = new ArrayList<OIdentifier>();
  protected OJson metadata;

  public OCreateIndexStatement(int id) {
    super(id);
  }

  public OCreateIndexStatement(OrientSql p, int id) {
    super(p, id);
  }

  @Override public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE INDEX ");
    name.toString(params, builder);
    if (className != null) {
      builder.append(" ON ");
      className.toString(params, builder);
      builder.append(" (");
      boolean first = true;
      for (Property prop : propertyList) {
        if (!first) {
          builder.append(", ");
        }
        if (prop.name != null) {
          prop.name.toString(params, builder);
        } else {
          prop.recordAttribute.toString(params, builder);
        }
        if (prop.byKey) {
          builder.append(" BY KEY");
        } else if (prop.byValue) {
          builder.append(" BY VALUE");
        }
        if (prop.collate != null) {
          builder.append(" COLLATE ");
          prop.collate.toString(params, builder);
        }
        first = false;
      }
      builder.append(")");
    }
    builder.append(" ");
    type.toString(params, builder);
    if (engine != null) {
      builder.append(" ENGINE ");
      engine.toString(params, builder);
    }
    if (keyTypes != null && keyTypes.size() > 0) {
      boolean first = true;
      builder.append(" ");
      for (OIdentifier keyType : keyTypes) {
        if (!first) {
          builder.append(",");
        }
        keyType.toString(params, builder);
        first = false;
      }
    }
    if (metadata != null) {
      builder.append(" METADATA ");
      metadata.toString(params, builder);
    }
  }

  @Override public OCreateIndexStatement copy() {
    OCreateIndexStatement result = new OCreateIndexStatement(-1);
    result.name = name == null ? null : name.copy();
    result.className = className == null ? null : className.copy();
    result.propertyList = propertyList == null ? null : propertyList.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.type = type == null ? null : type.copy();
    result.engine = engine == null ? null : engine.copy();
    result.keyTypes = keyTypes == null ? null : keyTypes.stream().map(x -> x.copy()).collect(Collectors.toList());
    result.metadata = metadata == null ? null : metadata.copy();
    return result;
  }

  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    OCreateIndexStatement that = (OCreateIndexStatement) o;

    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (className != null ? !className.equals(that.className) : that.className != null)
      return false;
    if (propertyList != null ? !propertyList.equals(that.propertyList) : that.propertyList != null)
      return false;
    if (type != null ? !type.equals(that.type) : that.type != null)
      return false;
    if (engine != null ? !engine.equals(that.engine) : that.engine != null)
      return false;
    if (keyTypes != null ? !keyTypes.equals(that.keyTypes) : that.keyTypes != null)
      return false;
    if (metadata != null ? !metadata.equals(that.metadata) : that.metadata != null)
      return false;

    return true;
  }

  @Override public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (className != null ? className.hashCode() : 0);
    result = 31 * result + (propertyList != null ? propertyList.hashCode() : 0);
    result = 31 * result + (type != null ? type.hashCode() : 0);
    result = 31 * result + (engine != null ? engine.hashCode() : 0);
    result = 31 * result + (keyTypes != null ? keyTypes.hashCode() : 0);
    result = 31 * result + (metadata != null ? metadata.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=bd090e02c4346ad390a6b8c77f1b9dba (do not edit this line) */
