/* Generated By:JJTree: Do not edit this line. OMethodCall.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal;
import com.orientechnologies.orient.core.db.ODatabaseRecordThreadLocal;
import com.orientechnologies.orient.core.db.record.OIdentifiable;
import com.orientechnologies.orient.core.sql.OSQLEngine;
import com.orientechnologies.orient.core.sql.functions.OSQLFunction;
import com.orientechnologies.orient.core.sql.method.OSQLMethod;

import java.util.*;

public class OMethodCall extends SimpleNode {

  static Set<String>          graphMethods = new HashSet<String>(Arrays.asList(new String[] { "out", "in", "both", "outE", "outV",
      "inE", "inV", "bothE", "bothV"      }));

  protected OIdentifier       methodName;
  protected List<OExpression> params       = new ArrayList<OExpression>();

  public OMethodCall(int id) {
    super(id);
  }

  public OMethodCall(OrientSql p, int id) {
    super(p, id);
  }

  /**
   * Accept the visitor. *
   */
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  @Override
  public String toString() {
    StringBuilder result = new StringBuilder();
    result.append(".");
    result.append(methodName.toString());
    result.append("(");
    boolean first = true;
    for (OExpression param : params) {
      if (!first) {
        result.append(", ");
      }
      result.append(param.toString());
      first = false;
    }
    result.append(")");
    return result.toString();
  }

  public void replaceParameters(Map<Object, Object> iParams) {
    if (this.params != null) {
      for (OExpression exp : this.params) {
        exp.replaceParameters(iParams);
      }
    }
  }

  public boolean isBidirectional() {
    return graphMethods.contains(methodName.getValue());
  }

  public Object execute(Object targetObjects, OCommandContext ctx) {
    return execute(targetObjects, ctx, methodName.getValue());
  }

  private Object execute(Object targetObjects, OCommandContext ctx, String name) {
    List<Object> paramValues = new ArrayList<Object>();
    for (OExpression expr : this.params) {
      paramValues.add(expr.execute((OIdentifiable) ctx.getVariable("$current"), ctx));
    }
    if (graphMethods.contains(name)) {
      OSQLFunction function = OSQLEngine.getInstance().getFunction(name);
      return function.execute(targetObjects, (OIdentifiable) ctx.getVariable("$current"), null, paramValues.toArray(), ctx);

    }
    OSQLMethod method = OSQLEngine.getMethod(name);
    if (method != null) {
      return method.execute(targetObjects, (OIdentifiable) ctx.getVariable("$current"), ctx, targetObjects, paramValues.toArray());
    }
    throw new UnsupportedOperationException("OMethod call, something missing in the implementation...?");

  }

  public Object executeReverse(Object targetObjects, OCommandContext ctx) {
    if (!isBidirectional()) {
      throw new UnsupportedOperationException();
    }

    String straightName = methodName.getValue();
    if (straightName.equals("out")) {
      return execute(targetObjects, ctx, "in");
    }
    if (straightName.equals("in")) {
      return execute(targetObjects, ctx, "out");
    }
    if (straightName.equals("outE")) {
      return execute(targetObjects, ctx, "outV");
    }
    if (straightName.equals("inE")) {
      return execute(targetObjects, ctx, "inV");
    }
    if (straightName.equals("outV")) {
      return execute(targetObjects, ctx, "outE");
    }
    if (straightName.equals("inV")) {
      return execute(targetObjects, ctx, "inE");
    }

    return execute(targetObjects, ctx, straightName);// both
  }

  public static ODatabaseDocumentInternal getDatabase() {
    return ODatabaseRecordThreadLocal.INSTANCE.get();
  }

}
/* JavaCC - OriginalChecksum=da95662da21ceb8dee3ad88c0d980413 (do not edit this line) */
