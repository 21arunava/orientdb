/* Generated By:JJTree&JavaCC: Do not edit this line. OrientSql.java */
package com.orientechnologies.orient.core.sql.parser;

/** Orient Database Sql grammar. */
public class OrientSql/*@bgen(jjtree)*/implements OrientSqlTreeConstants, OrientSqlConstants {/*@bgen(jjtree)*/
  protected JJTOrientSqlState jjtree = new JJTOrientSqlState();
    /** Main entry point. For development purpose only */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    OrientSql t = new OrientSql(System.in);
    try {
      SimpleNode n = t.OrientGrammar();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  final public void Rid() throws ParseException {
 /*@bgen(jjtree) Rid */
  ORid jjtn000 = new ORid(JJTRID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_1(4)) {
        jj_consume_token(141);
        jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(COLON);
        jj_consume_token(INTEGER_LITERAL);
      } else if (jj_2_2(3)) {
        jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(COLON);
        jj_consume_token(INTEGER_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
    }
  }

/** Root production. */
  final public SimpleNode OrientGrammar() throws ParseException {
 /*@bgen(jjtree) OrientGrammar */
  OOrientGrammar jjtn000 = new OOrientGrammar(JJTORIENTGRAMMAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Statement();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  OIdentifier jjtn000 = new OIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case IN:
        jj_consume_token(IN);
        break;
      case SET:
        jj_consume_token(SET);
        break;
      case PUT:
        jj_consume_token(PUT);
        break;
      case ADD:
        jj_consume_token(ADD);
        break;
      case REMOVE:
        jj_consume_token(REMOVE);
        break;
      case MERGE:
        jj_consume_token(MERGE);
        break;
      case CONTENT:
        jj_consume_token(CONTENT);
        break;
      case ORDER:
        jj_consume_token(ORDER);
        break;
      case KEY:
        jj_consume_token(KEY);
        break;
      case OFFSET:
        jj_consume_token(OFFSET);
        break;
      case GROUP:
        jj_consume_token(GROUP);
        break;
      case VALUES:
        jj_consume_token(VALUES);
        break;
      case RECORD:
        jj_consume_token(RECORD);
        break;
      case TO:
        jj_consume_token(TO);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  OInteger jjtn000 = new OInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(INTEGER_LITERAL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FloatingPoint() throws ParseException {
 /*@bgen(jjtree) FloatingPoint */
  OFloatingPoint jjtn000 = new OFloatingPoint(JJTFLOATINGPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(FLOATING_POINT_LITERAL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
  ONumber jjtn000 = new ONumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_3(2147483647)) {
        Integer();
      } else if (jj_2_4(2147483647)) {
        FloatingPoint();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  OStatement jjtn000 = new OStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_5(2147483647)) {
        SelectStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          SelectWithoutTargetStatement();
          break;
        case TRAVERSE:
          TraverseStatement();
          break;
        default:
          jj_la1[3] = jj_gen;
          if (jj_2_6(2)) {
            DeleteStatement();
          } else if (jj_2_7(2)) {
            DeleteVertexStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INSERT:
              InsertStatement();
              break;
            default:
              jj_la1[4] = jj_gen;
              if (jj_2_8(2147483647)) {
                CreateVertexStatement();
              } else if (jj_2_9(2147483647)) {
                CreateVertexStatementNoTarget();
              } else if (jj_2_10(2)) {
                CreateEdgeStatement();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case UPDATE:
                  UpdateStatement();
                  break;
                default:
                  jj_la1[5] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void SelectWithoutTargetStatement() throws ParseException {
 /*@bgen(jjtree) SelectWithoutTargetStatement */
  OSelectWithoutTargetStatement jjtn000 = new OSelectWithoutTargetStatement(JJTSELECTWITHOUTTARGETSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SELECT);
      ValueItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        Alias();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        ValueItem();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          Alias();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FETCHPLAN:
        FetchPlan();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void SelectStatement() throws ParseException {
 /*@bgen(jjtree) SelectStatement */
  OSelectStatement jjtn000 = new OSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case NULL:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case STAR:
      case IN:
      case KEY:
      case IDENTIFIER:
      case 141:
        jjtn000.projection = Projection();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(FROM);
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        WhereClause();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        OrderBy();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        GroupBy();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
      case SKIP2:
      case OFFSET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SKIP2:
        case OFFSET:
          Skip();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIMIT:
            Limit();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
        case LIMIT:
          Limit();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SKIP2:
          case OFFSET:
            Skip();
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FETCHPLAN:
        FetchPlan();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOCK:
        jj_consume_token(LOCK);
        jj_consume_token(RECORD);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void TraverseStatement() throws ParseException {
 /*@bgen(jjtree) TraverseStatement */
  OTraverseStatement jjtn000 = new OTraverseStatement(JJTTRAVERSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRAVERSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case LBRACKET:
      case STAR:
      case IN:
      case KEY:
      case IDENTIFIER:
        TraverseProjectionItem();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          TraverseProjectionItem();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(FROM);
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        WhereClause();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        Limit();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void DeleteStatement() throws ParseException {
 /*@bgen(jjtree) DeleteStatement */
  ODeleteStatement jjtn000 = new ODeleteStatement(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        WhereClause();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void DeleteVertexStatement() throws ParseException {
 /*@bgen(jjtree) DeleteVertexStatement */
  ODeleteVertexStatement jjtn000 = new ODeleteVertexStatement(JJTDELETEVERTEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      jj_consume_token(VERTEX);
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        WhereClause();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdateStatement() throws ParseException {
 /*@bgen(jjtree) UpdateStatement */
  OUpdateStatement jjtn000 = new OUpdateStatement(JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(UPDATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case 141:
        Rid();
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        break;
      case CLUSTER_IDENTIFIER:
        Cluster();
        break;
      case INDEX_IDENTIFIER:
      case INDEXVALUES_IDENTIFIER:
      case INDEXVALUESASC_IDENTIFIER:
      case INDEXVALUESDESC_IDENTIFIER:
        IndexIdentifier();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        UpdateOperations();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case INCREMENT:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_3;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPSERT:
        jj_consume_token(UPSERT);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEFORE:
          jj_consume_token(BEFORE);
          break;
        case AFTER:
          jj_consume_token(AFTER);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case THIS:
        case RECORD_ATTRIBUTE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
        case 141:
          Projection();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        WhereClause();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOCK:
        jj_consume_token(LOCK);
        jj_consume_token(RECORD);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        Limit();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMEOUT:
        Timeout();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdateOperations() throws ParseException {
 /*@bgen(jjtree) UpdateOperations */
  OUpdateOperations jjtn000 = new OUpdateOperations(JJTUPDATEOPERATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET:
        jj_consume_token(SET);
        UpdateItem();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          UpdateItem();
        }
        break;
      case PUT:
        jj_consume_token(PUT);
        UpdatePutItem();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          UpdatePutItem();
        }
        break;
      case MERGE:
      case CONTENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MERGE:
          jj_consume_token(MERGE);
          break;
        case CONTENT:
          jj_consume_token(CONTENT);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UpdateMergeItem();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          UpdateMergeItem();
        }
        break;
      case ADD:
      case INCREMENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENT:
          jj_consume_token(INCREMENT);
          break;
        case ADD:
          jj_consume_token(ADD);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UpdateIncrementItem();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          UpdateIncrementItem();
        }
        break;
      case REMOVE:
        jj_consume_token(REMOVE);
        UpdateRemoveItem();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          UpdateRemoveItem();
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void UpdateItem() throws ParseException {
 /*@bgen(jjtree) UpdateItem */
  OUpdateItem jjtn000 = new OUpdateItem(JJTUPDATEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case PLUSASSIGN:
        jj_consume_token(PLUSASSIGN);
        break;
      case MINUSASSIGN:
        jj_consume_token(MINUSASSIGN);
        break;
      case STARASSIGN:
        jj_consume_token(STARASSIGN);
        break;
      case SLASHASSIGN:
        jj_consume_token(SLASHASSIGN);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdateIncrementItem() throws ParseException {
 /*@bgen(jjtree) UpdateIncrementItem */
  OUpdateIncrementItem jjtn000 = new OUpdateIncrementItem(JJTUPDATEINCREMENTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(EQ);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdateRemoveItem() throws ParseException {
 /*@bgen(jjtree) UpdateRemoveItem */
  OUpdateRemoveItem jjtn000 = new OUpdateRemoveItem(JJTUPDATEREMOVEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        Expression();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdatePutItem() throws ParseException {
 /*@bgen(jjtree) UpdatePutItem */
  OUpdatePutItem jjtn000 = new OUpdatePutItem(JJTUPDATEPUTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(EQ);
      Expression();
      jj_consume_token(COMMA);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdateMergeItem() throws ParseException {
 /*@bgen(jjtree) UpdateMergeItem */
  OUpdateMergeItem jjtn000 = new OUpdateMergeItem(JJTUPDATEMERGEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(EQ);
      Json();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UpdateAddItem() throws ParseException {
 /*@bgen(jjtree) UpdateAddItem */
  OUpdateAddItem jjtn000 = new OUpdateAddItem(JJTUPDATEADDITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[47] = jj_gen;
        if (jj_2_11(2147483647)) {
          Rid();
        } else if (jj_2_12(3)) {
          Integer();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FLOATING_POINT_LITERAL:
            jj_consume_token(FLOATING_POINT_LITERAL);
            break;
          case CHARACTER_LITERAL:
            jj_consume_token(CHARACTER_LITERAL);
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
            Rid();
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[46] = jj_gen;
                break label_9;
              }
              jj_consume_token(COMMA);
              Rid();
            }
            jj_consume_token(RBRACKET);
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void InsertStatement() throws ParseException {
 /*@bgen(jjtree) InsertStatement */
  OInsertStatement jjtn000 = new OInsertStatement(JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLUSTER:
          jj_consume_token(CLUSTER);
          Identifier();
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        break;
      case CLUSTER_IDENTIFIER:
        Cluster();
        break;
      case INDEX_IDENTIFIER:
      case INDEXVALUES_IDENTIFIER:
      case INDEXVALUESASC_IDENTIFIER:
      case INDEXVALUESDESC_IDENTIFIER:
        IndexIdentifier();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      InsertBody();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void InsertBody() throws ParseException {
 /*@bgen(jjtree) InsertBody */
  OInsertBody jjtn000 = new OInsertBody(JJTINSERTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_14(2)) {
        jj_consume_token(LPAREN);
        Identifier();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[51] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          Identifier();
        }
        jj_consume_token(RPAREN);
        jj_consume_token(VALUES);
        jj_consume_token(LPAREN);
        Expression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_15(3)) {
        jj_consume_token(SET);
        Identifier();
        jj_consume_token(EQ);
        Expression();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          Identifier();
          jj_consume_token(EQ);
          Expression();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
        case FROM:
        case LPAREN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FROM:
            jj_consume_token(FROM);
            break;
          default:
            jj_la1[54] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SELECT:
            SelectStatement();
            break;
          default:
            jj_la1[55] = jj_gen;
            if (jj_2_13(2)) {
              jj_consume_token(LPAREN);
              SelectStatement();
              jj_consume_token(RPAREN);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case CONTENT:
          jj_consume_token(CONTENT);
          Json();
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        Projection();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void CreateVertexStatement() throws ParseException {
 /*@bgen(jjtree) CreateVertexStatement */
  OCreateVertexStatement jjtn000 = new OCreateVertexStatement(JJTCREATEVERTEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VERTEX);
      if (jj_2_16(3)) {
        Identifier();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLUSTER_IDENTIFIER:
          Cluster();
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case FROM:
      case SET:
      case CONTENT:
      case LPAREN:
        InsertBody();
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void CreateVertexStatementNoTarget() throws ParseException {
 /*@bgen(jjtree) CreateVertexStatementNoTarget */
  OCreateVertexStatementNoTarget jjtn000 = new OCreateVertexStatementNoTarget(JJTCREATEVERTEXSTATEMENTNOTARGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(VERTEX);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case FROM:
      case SET:
      case CONTENT:
      case LPAREN:
        InsertBody();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void CreateEdgeStatement() throws ParseException {
 /*@bgen(jjtree) CreateEdgeStatement */
  OCreateEdgeStatement jjtn000 = new OCreateEdgeStatement(JJTCREATEEDGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(EDGE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(FROM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case 141:
        Rid();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case 141:
          Rid();
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[62] = jj_gen;
              break label_13;
            }
            jj_consume_token(COMMA);
            Rid();
          }
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        if (jj_2_17(2147483647)) {
          SelectStatement();
        } else if (jj_2_18(2147483647)) {
          SelectWithoutTargetStatement();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case 141:
        Rid();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case 141:
          Rid();
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[65] = jj_gen;
              break label_14;
            }
            jj_consume_token(COMMA);
            Rid();
          }
          break;
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        if (jj_2_19(2147483647)) {
          SelectStatement();
        } else if (jj_2_20(2147483647)) {
          SelectWithoutTargetStatement();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
      case FROM:
      case SET:
      case CONTENT:
      case LPAREN:
        InsertBody();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETRY:
        Retry();
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WAIT:
        Wait();
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void InputParameter() throws ParseException {
 /*@bgen(jjtree) InputParameter */
  OInputParameter jjtn000 = new OInputParameter(JJTINPUTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        PositionalParameter();
        break;
      case COLON:
        NamedParameter();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void PositionalParameter() throws ParseException {
 /*@bgen(jjtree) PositionalParameter */
  OPositionalParameter jjtn000 = new OPositionalParameter(JJTPOSITIONALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HOOK);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void NamedParameter() throws ParseException {
 /*@bgen(jjtree) NamedParameter */
  ONamedParameter jjtn000 = new ONamedParameter(JJTNAMEDPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public OProjection Projection() throws ParseException {
 /*@bgen(jjtree) Projection */
  OProjection jjtn000 = new OProjection(JJTPROJECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ProjectionItem();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        ProjectionItem();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ProjectionItem() throws ParseException {
 /*@bgen(jjtree) ProjectionItem */
  OProjectionItem jjtn000 = new OProjectionItem(JJTPROJECTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case NULL:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case IN:
      case KEY:
      case IDENTIFIER:
      case 141:
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          Alias();
          break;
        default:
          jj_la1[73] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ValueItem() throws ParseException {
 /*@bgen(jjtree) ValueItem */
  OValueItem jjtn000 = new OValueItem(JJTVALUEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      default:
        jj_la1[76] = jj_gen;
        if (jj_2_26(2147483647)) {
          Integer();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TO:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case INTEGER_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case LBRACE:
          case LBRACKET:
          case HOOK:
          case COLON:
          case IN:
          case KEY:
          case IDENTIFIER:
          case 141:
            if (jj_2_21(2147483647)) {
              Rid();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                Array();
                break;
              case LBRACE:
                Json();
                break;
              case CHARACTER_LITERAL:
                jj_consume_token(CHARACTER_LITERAL);
                break;
              default:
                jj_la1[75] = jj_gen;
                if (jj_2_22(2)) {
                  jj_consume_token(STRING_LITERAL);
                } else if (jj_2_23(2147483647)) {
                  InputParameter();
                } else if (jj_2_24(2147483647)) {
                  FunctionCall();
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
            if (jj_2_25(2147483647)) {
              Modifier();
            } else {
              ;
            }
            break;
          default:
            jj_la1[77] = jj_gen;
            if (jj_2_27(2)) {
              jj_consume_token(LPAREN);
              SelectStatement();
              jj_consume_token(RPAREN);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ArraySelector() throws ParseException {
 /*@bgen(jjtree) ArraySelector */
  OArraySelector jjtn000 = new OArraySelector(JJTARRAYSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_28(2147483647)) {
        Rid();
      } else if (jj_2_29(2147483647)) {
        InputParameter();
      } else if (jj_2_30(2147483647)) {
        Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ArrayNumberSelector() throws ParseException {
 /*@bgen(jjtree) ArrayNumberSelector */
  OArrayNumberSelector jjtn000 = new OArrayNumberSelector(JJTARRAYNUMBERSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_31(2147483647)) {
        InputParameter();
      } else if (jj_2_32(2147483647)) {
        MathExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ArraySingleValuesSelector() throws ParseException {
 /*@bgen(jjtree) ArraySingleValuesSelector */
  OArraySingleValuesSelector jjtn000 = new OArraySingleValuesSelector(JJTARRAYSINGLEVALUESSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ArraySelector();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        ArraySelector();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ArrayRangeSelector() throws ParseException {
 /*@bgen(jjtree) ArrayRangeSelector */
  OArrayRangeSelector jjtn000 = new OArrayRangeSelector(JJTARRAYRANGESELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_RANGE:
        jj_consume_token(INTEGER_RANGE);
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case LPAREN:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case IN:
      case KEY:
      case IDENTIFIER:
        ArrayNumberSelector();
        jj_consume_token(RANGE);
        ArrayNumberSelector();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Alias() throws ParseException {
 /*@bgen(jjtree) Alias */
  OAlias jjtn000 = new OAlias(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void RecordAttribute() throws ParseException {
 /*@bgen(jjtree) RecordAttribute */
  ORecordAttribute jjtn000 = new ORecordAttribute(JJTRECORDATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RECORD_ATTRIBUTE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ThisOperation() throws ParseException {
 /*@bgen(jjtree) ThisOperation */
  OThisOperation jjtn000 = new OThisOperation(JJTTHISOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THIS);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_17;
        }
        MethodCall();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void FunctionCall() throws ParseException {
 /*@bgen(jjtree) FunctionCall */
  OFunctionCall jjtn000 = new OFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      default:
        jj_la1[83] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case THIS:
        case RECORD_ATTRIBUTE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case IN:
        case KEY:
        case IDENTIFIER:
        case 141:
          Expression();
          label_18:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[81] = jj_gen;
              break label_18;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void MethodCall() throws ParseException {
 /*@bgen(jjtree) MethodCall */
  OMethodCall jjtn000 = new OMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DOT);
      Identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case NULL:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case IN:
      case KEY:
      case IDENTIFIER:
      case 141:
        Expression();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[84] = jj_gen;
            break label_19;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void LevelZeroIdentifier() throws ParseException {
 /*@bgen(jjtree) LevelZeroIdentifier */
  OLevelZeroIdentifier jjtn000 = new OLevelZeroIdentifier(JJTLEVELZEROIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_33(2147483647)) {
        FunctionCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THIS:
          jj_consume_token(THIS);
          break;
        default:
          jj_la1[86] = jj_gen;
          if (jj_2_34(2147483647)) {
            Collection();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void SuffixIdentifier() throws ParseException {
 /*@bgen(jjtree) SuffixIdentifier */
  OSuffixIdentifier jjtn000 = new OSuffixIdentifier(JJTSUFFIXIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_35(2147483647)) {
        Identifier();
      } else if (jj_2_36(2147483647)) {
        RecordAttribute();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void BaseIdentifier() throws ParseException {
 /*@bgen(jjtree) BaseIdentifier */
  OBaseIdentifier jjtn000 = new OBaseIdentifier(JJTBASEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_37(2147483647)) {
        LevelZeroIdentifier();
      } else if (jj_2_38(2147483647)) {
        SuffixIdentifier();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Modifier() throws ParseException {
 /*@bgen(jjtree) Modifier */
  OModifier jjtn000 = new OModifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        if (jj_2_39(2147483647)) {
          ArrayRangeSelector();
        } else if (jj_2_40(2147483647)) {
          OrBlock();
        } else if (jj_2_41(2147483647)) {
          ArraySingleValuesSelector();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[87] = jj_gen;
        if (jj_2_42(2147483647)) {
          MethodCall();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            jj_consume_token(DOT);
            SuffixIdentifier();
            break;
          default:
            jj_la1[88] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      if (jj_2_43(2147483647)) {
        Modifier();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  OExpression jjtn000 = new OExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
        jj_consume_token(NULL);
        break;
      default:
        jj_la1[89] = jj_gen;
        if (jj_2_44(2)) {
          jj_consume_token(STRING_LITERAL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHARACTER_LITERAL:
            jj_consume_token(CHARACTER_LITERAL);
            break;
          default:
            jj_la1[90] = jj_gen;
            if (jj_2_45(2147483647)) {
              Rid();
            } else if (jj_2_46(2147483647)) {
              InputParameter();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case TO:
              case VALUES:
              case SET:
              case ADD:
              case PUT:
              case MERGE:
              case CONTENT:
              case REMOVE:
              case ORDER:
              case GROUP:
              case OFFSET:
              case RECORD:
              case THIS:
              case RECORD_ATTRIBUTE:
              case INTEGER_LITERAL:
              case FLOATING_POINT_LITERAL:
              case LPAREN:
              case LBRACKET:
              case MINUS:
              case IN:
              case KEY:
              case IDENTIFIER:
                MathExpression();
                break;
              case LBRACE:
                Json();
                break;
              case TRUE:
                jj_consume_token(TRUE);
                break;
              case FALSE:
                jj_consume_token(FALSE);
                break;
              default:
                jj_la1[91] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void MathExpression() throws ParseException {
 /*@bgen(jjtree) MathExpression */
  OMathExpression jjtn000 = new OMathExpression(JJTMATHEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      MultExpression();
      label_20:
      while (true) {
        if (jj_2_47(2)) {
          ;
        } else {
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void MultExpression() throws ParseException {
 /*@bgen(jjtree) MultExpression */
  OMultExpression jjtn000 = new OMultExpression(JJTMULTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      FirstLevelExpression();
      label_21:
      while (true) {
        if (jj_2_48(2)) {
          ;
        } else {
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        FirstLevelExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FirstLevelExpression() throws ParseException {
 /*@bgen(jjtree) FirstLevelExpression */
  OFirstLevelExpression jjtn000 = new OFirstLevelExpression(JJTFIRSTLEVELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_49(2147483647)) {
        ParenthesisExpression();
      } else if (jj_2_50(2147483647)) {
        BaseExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ParenthesisExpression() throws ParseException {
 /*@bgen(jjtree) ParenthesisExpression */
  OParenthesisExpression jjtn000 = new OParenthesisExpression(JJTPARENTHESISEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case NULL:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case IN:
      case KEY:
      case IDENTIFIER:
      case 141:
        Expression();
        break;
      case SELECT:
        SelectStatement();
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void BaseExpression() throws ParseException {
 /*@bgen(jjtree) BaseExpression */
  OBaseExpression jjtn000 = new OBaseExpression(JJTBASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case MINUS:
        Number();
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case LBRACKET:
      case IN:
      case KEY:
      case IDENTIFIER:
        BaseIdentifier();
        if (jj_2_51(2147483647)) {
          Modifier();
        } else {
          ;
        }
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FromClause() throws ParseException {
 /*@bgen(jjtree) FromClause */
  OFromClause jjtn000 = new OFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      FromItem();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void FromItem() throws ParseException {
 /*@bgen(jjtree) FromItem */
  OFromItem jjtn000 = new OFromItem(JJTFROMITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case 141:
        Rid();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Rid();
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[96] = jj_gen;
            break label_22;
          }
          jj_consume_token(COMMA);
          Rid();
        }
        jj_consume_token(RBRACKET);
        break;
      case CLUSTER_IDENTIFIER:
        Cluster();
        break;
      case INDEX_IDENTIFIER:
      case INDEXVALUES_IDENTIFIER:
      case INDEXVALUESASC_IDENTIFIER:
      case INDEXVALUESDESC_IDENTIFIER:
        IndexIdentifier();
        break;
      case METADATA_IDENTIFIER:
        MetadataIdentifier();
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          SelectStatement();
          break;
        case TRAVERSE:
          TraverseStatement();
          break;
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Cluster() throws ParseException {
 /*@bgen(jjtree) Cluster */
  OCluster jjtn000 = new OCluster(JJTCLUSTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CLUSTER_IDENTIFIER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void MetadataIdentifier() throws ParseException {
 /*@bgen(jjtree) MetadataIdentifier */
  OMetadataIdentifier jjtn000 = new OMetadataIdentifier(JJTMETADATAIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(METADATA_IDENTIFIER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void IndexIdentifier() throws ParseException {
 /*@bgen(jjtree) IndexIdentifier */
  OIndexIdentifier jjtn000 = new OIndexIdentifier(JJTINDEXIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDEX_IDENTIFIER:
        jj_consume_token(INDEX_IDENTIFIER);
        break;
      case INDEXVALUES_IDENTIFIER:
        jj_consume_token(INDEXVALUES_IDENTIFIER);
        break;
      case INDEXVALUESASC_IDENTIFIER:
        jj_consume_token(INDEXVALUESASC_IDENTIFIER);
        break;
      case INDEXVALUESDESC_IDENTIFIER:
        jj_consume_token(INDEXVALUESDESC_IDENTIFIER);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void WhereClause() throws ParseException {
 /*@bgen(jjtree) WhereClause */
  OWhereClause jjtn000 = new OWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      OrBlock();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void OrBlock() throws ParseException {
 /*@bgen(jjtree) OrBlock */
  OOrBlock jjtn000 = new OOrBlock(JJTORBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AndBlock();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_23;
        }
        jj_consume_token(OR);
        AndBlock();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void AndBlock() throws ParseException {
 /*@bgen(jjtree) AndBlock */
  OAndBlock jjtn000 = new OAndBlock(JJTANDBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      NotBlock();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_24;
        }
        jj_consume_token(AND);
        NotBlock();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void NotBlock() throws ParseException {
 /*@bgen(jjtree) NotBlock */
  ONotBlock jjtn000 = new ONotBlock(JJTNOTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        if (jj_2_52(2147483647)) {
          ConditionBlock();
        } else if (jj_2_53(2147483647)) {
          ParenthesisBlock();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case NULL:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case IN:
      case KEY:
      case IDENTIFIER:
      case 141:
        if (jj_2_54(2147483647)) {
          ConditionBlock();
        } else if (jj_2_55(2147483647)) {
          ParenthesisBlock();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ParenthesisBlock() throws ParseException {
 /*@bgen(jjtree) ParenthesisBlock */
  OParenthesisBlock jjtn000 = new OParenthesisBlock(JJTPARENTHESISBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      OrBlock();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ConditionBlock() throws ParseException {
 /*@bgen(jjtree) ConditionBlock */
  OConditionBlock jjtn000 = new OConditionBlock(JJTCONDITIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_56(2147483647)) {
        IsNotNullCondition();
      } else if (jj_2_57(2147483647)) {
        IsNullCondition();
      } else if (jj_2_58(2147483647)) {
        IsNotDefinedCondition();
      } else if (jj_2_59(2147483647)) {
        IsDefinedCondition();
      } else if (jj_2_60(2147483647)) {
        InCondition();
      } else if (jj_2_61(2147483647)) {
        NotInCondition();
      } else if (jj_2_62(2147483647)) {
        BinaryCondition();
      } else if (jj_2_63(2147483647)) {
        BetweenCondition();
      } else if (jj_2_64(2147483647)) {
        ContainsCondition();
      } else if (jj_2_65(2147483647)) {
        ContainsValueCondition();
      } else if (jj_2_66(2147483647)) {
        ContainsAllCondition();
      } else if (jj_2_67(2147483647)) {
        ContainsTextCondition();
      } else if (jj_2_68(2147483647)) {
        MatchesCondition();
      } else if (jj_2_69(2147483647)) {
        IndexMatchCondition();
      } else if (jj_2_70(2147483647)) {
        InstanceofCondition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void CompareOperator() throws ParseException {
 /*@bgen(jjtree) CompareOperator */
  OCompareOperator jjtn000 = new OCompareOperator(JJTCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        EqualsCompareOperator();
        break;
      case LT:
        LtOperator();
        break;
      case GT:
        GtOperator();
        break;
      case NE:
        NeOperator();
        break;
      case NEQ:
        NeqOperator();
        break;
      case GE:
        GeOperator();
        break;
      case LE:
        LeOperator();
        break;
      case LIKE:
        LikeOperator();
        break;
      case CONTAINSKEY:
        ContainsKeyOperator();
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
  }

  final public void LtOperator() throws ParseException {
 /*@bgen(jjtree) LtOperator */
  OLtOperator jjtn000 = new OLtOperator(JJTLTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void GtOperator() throws ParseException {
 /*@bgen(jjtree) GtOperator */
  OGtOperator jjtn000 = new OGtOperator(JJTGTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void NeOperator() throws ParseException {
 /*@bgen(jjtree) NeOperator */
  ONeOperator jjtn000 = new ONeOperator(JJTNEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void NeqOperator() throws ParseException {
 /*@bgen(jjtree) NeqOperator */
  ONeqOperator jjtn000 = new ONeqOperator(JJTNEQOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NEQ);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void GeOperator() throws ParseException {
 /*@bgen(jjtree) GeOperator */
  OGeOperator jjtn000 = new OGeOperator(JJTGEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void LeOperator() throws ParseException {
 /*@bgen(jjtree) LeOperator */
  OLeOperator jjtn000 = new OLeOperator(JJTLEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void LikeOperator() throws ParseException {
 /*@bgen(jjtree) LikeOperator */
  OLikeOperator jjtn000 = new OLikeOperator(JJTLIKEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LIKE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ContainsKeyOperator() throws ParseException {
 /*@bgen(jjtree) ContainsKeyOperator */
  OContainsKeyOperator jjtn000 = new OContainsKeyOperator(JJTCONTAINSKEYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTAINSKEY);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ContainsValueOperator() throws ParseException {
 /*@bgen(jjtree) ContainsValueOperator */
  OContainsValueOperator jjtn000 = new OContainsValueOperator(JJTCONTAINSVALUEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTAINSVALUE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void EqualsCompareOperator() throws ParseException {
 /*@bgen(jjtree) EqualsCompareOperator */
  OEqualsCompareOperator jjtn000 = new OEqualsCompareOperator(JJTEQUALSCOMPAREOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EQ);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void BinaryCondition() throws ParseException {
 /*@bgen(jjtree) BinaryCondition */
  OBinaryCondition jjtn000 = new OBinaryCondition(JJTBINARYCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      CompareOperator();
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ContainsValueCondition() throws ParseException {
 /*@bgen(jjtree) ContainsValueCondition */
  OContainsValueCondition jjtn000 = new OContainsValueCondition(JJTCONTAINSVALUECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      ContainsValueOperator();
      if (jj_2_71(3)) {
        jj_consume_token(LPAREN);
        OrBlock();
        jj_consume_token(RPAREN);
      } else if (jj_2_72(2147483647)) {
        Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void InstanceofCondition() throws ParseException {
 /*@bgen(jjtree) InstanceofCondition */
  OInstanceofCondition jjtn000 = new OInstanceofCondition(JJTINSTANCEOFCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(INSTANCEOF);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IndexMatchCondition() throws ParseException {
 /*@bgen(jjtree) IndexMatchCondition */
  OIndexMatchCondition jjtn000 = new OIndexMatchCondition(JJTINDEXMATCHCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(KEY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case LT:
      case GT:
      case LE:
      case GE:
      case NE:
      case NEQ:
      case LIKE:
      case CONTAINSKEY:
        CompareOperator();
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case THIS:
        case RECORD_ATTRIBUTE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case IN:
        case KEY:
        case IDENTIFIER:
        case 141:
          Expression();
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[105] = jj_gen;
              break label_25;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[106] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      case BETWEEN:
        jj_consume_token(BETWEEN);
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case THIS:
        case RECORD_ATTRIBUTE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case IN:
        case KEY:
        case IDENTIFIER:
        case 141:
          Expression();
          label_26:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[107] = jj_gen;
              break label_26;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[108] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        jj_consume_token(AND);
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case NULL:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case THIS:
        case RECORD_ATTRIBUTE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case HOOK:
        case COLON:
        case MINUS:
        case IN:
        case KEY:
        case IDENTIFIER:
        case 141:
          Expression();
          label_27:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[109] = jj_gen;
              break label_27;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
        default:
          jj_la1[110] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void BetweenCondition() throws ParseException {
 /*@bgen(jjtree) BetweenCondition */
  OBetweenCondition jjtn000 = new OBetweenCondition(JJTBETWEENCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(BETWEEN);
      Expression();
      jj_consume_token(AND);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void IsNullCondition() throws ParseException {
 /*@bgen(jjtree) IsNullCondition */
  OIsNullCondition jjtn000 = new OIsNullCondition(JJTISNULLCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(IS);
      jj_consume_token(NULL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void IsNotNullCondition() throws ParseException {
 /*@bgen(jjtree) IsNotNullCondition */
  OIsNotNullCondition jjtn000 = new OIsNotNullCondition(JJTISNOTNULLCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(IS);
      jj_consume_token(NOT);
      jj_consume_token(NULL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void IsDefinedCondition() throws ParseException {
 /*@bgen(jjtree) IsDefinedCondition */
  OIsDefinedCondition jjtn000 = new OIsDefinedCondition(JJTISDEFINEDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(IS);
      jj_consume_token(DEFINED);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void IsNotDefinedCondition() throws ParseException {
 /*@bgen(jjtree) IsNotDefinedCondition */
  OIsNotDefinedCondition jjtn000 = new OIsNotDefinedCondition(JJTISNOTDEFINEDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(IS);
      jj_consume_token(NOT);
      jj_consume_token(DEFINED);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ContainsCondition() throws ParseException {
 /*@bgen(jjtree) ContainsCondition */
  OContainsCondition jjtn000 = new OContainsCondition(JJTCONTAINSCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(CONTAINS);
      if (jj_2_73(3)) {
        jj_consume_token(LPAREN);
        OrBlock();
        jj_consume_token(RPAREN);
      } else if (jj_2_74(2147483647)) {
        Expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void InOperator() throws ParseException {
 /*@bgen(jjtree) InOperator */
  OInOperator jjtn000 = new OInOperator(JJTINOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IN);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void InCondition() throws ParseException {
 /*@bgen(jjtree) InCondition */
  OInCondition jjtn000 = new OInCondition(JJTINCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      InOperator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Expression();
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[112] = jj_gen;
            break label_28;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        jj_consume_token(RBRACKET);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        SelectStatement();
        jj_consume_token(RPAREN);
        break;
      case HOOK:
      case COLON:
        InputParameter();
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void NotInCondition() throws ParseException {
 /*@bgen(jjtree) NotInCondition */
  ONotInCondition jjtn000 = new ONotInCondition(JJTNOTINCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(NOT);
      InOperator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Expression();
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[114] = jj_gen;
            break label_29;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        jj_consume_token(RBRACKET);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        SelectStatement();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ContainsAllCondition() throws ParseException {
 /*@bgen(jjtree) ContainsAllCondition */
  OContainsAllCondition jjtn000 = new OContainsAllCondition(JJTCONTAINSALLCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(CONTAINSALL);
      jj_consume_token(LPAREN);
      OrBlock();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ContainsTextCondition() throws ParseException {
 /*@bgen(jjtree) ContainsTextCondition */
  OContainsTextCondition jjtn000 = new OContainsTextCondition(JJTCONTAINSTEXTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(CONTAINSTEXT);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void MatchesCondition() throws ParseException {
 /*@bgen(jjtree) MatchesCondition */
  OMatchesCondition jjtn000 = new OMatchesCondition(JJTMATCHESCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(MATCHES);
      jj_consume_token(STRING_LITERAL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void OrderBy() throws ParseException {
 /*@bgen(jjtree) OrderBy */
  OOrderBy jjtn000 = new OOrderBy(JJTORDERBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        break;
      case INTEGER_LITERAL:
      case 141:
        Rid();
        break;
      case RECORD_ATTRIBUTE:
        jj_consume_token(RECORD_ATTRIBUTE);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESC:
          jj_consume_token(DESC);
          break;
        case ASC:
          jj_consume_token(ASC);
          break;
        default:
          jj_la1[117] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[118] = jj_gen;
        ;
      }
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_30;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case IN:
        case KEY:
        case IDENTIFIER:
          Identifier();
          break;
        case INTEGER_LITERAL:
        case 141:
          Rid();
          break;
        case RECORD_ATTRIBUTE:
          jj_consume_token(RECORD_ATTRIBUTE);
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
        case DESC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DESC:
            jj_consume_token(DESC);
            break;
          case ASC:
            jj_consume_token(ASC);
            break;
          default:
            jj_la1[121] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[122] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void GroupBy() throws ParseException {
 /*@bgen(jjtree) GroupBy */
  OGroupBy jjtn000 = new OGroupBy(JJTGROUPBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      Identifier();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_31;
        }
        jj_consume_token(COMMA);
        Identifier();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Limit() throws ParseException {
 /*@bgen(jjtree) Limit */
  OLimit jjtn000 = new OLimit(JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LIMIT);
      Integer();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Skip() throws ParseException {
 /*@bgen(jjtree) Skip */
  OSkip jjtn000 = new OSkip(JJTSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SKIP2:
        jj_consume_token(SKIP2);
        Integer();
        break;
      case OFFSET:
        jj_consume_token(OFFSET);
        Integer();
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Timeout() throws ParseException {
 /*@bgen(jjtree) Timeout */
  OTimeout jjtn000 = new OTimeout(JJTTIMEOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TIMEOUT);
      Integer();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Wait() throws ParseException {
 /*@bgen(jjtree) Wait */
  OWait jjtn000 = new OWait(JJTWAIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WAIT);
      Integer();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Retry() throws ParseException {
 /*@bgen(jjtree) Retry */
  ORetry jjtn000 = new ORetry(JJTRETRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETRY);
      Integer();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Collection() throws ParseException {
 /*@bgen(jjtree) Collection */
  OCollection jjtn000 = new OCollection(JJTCOLLECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACKET);
      Expression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[125] = jj_gen;
          break label_32;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FetchPlan() throws ParseException {
 /*@bgen(jjtree) FetchPlan */
  OFetchPlan jjtn000 = new OFetchPlan(JJTFETCHPLAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FETCHPLAN);
      FetchPlanItem();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case STAR:
        case IN:
        case KEY:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[126] = jj_gen;
          break label_33;
        }
        FetchPlanItem();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FetchPlanItem() throws ParseException {
 /*@bgen(jjtree) FetchPlanItem */
  OFetchPlanItem jjtn000 = new OFetchPlanItem(JJTFETCHPLANITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case IN:
      case KEY:
      case IDENTIFIER:
        Identifier();
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            ;
            break;
          default:
            jj_la1[127] = jj_gen;
            break label_34;
          }
          jj_consume_token(DOT);
          Identifier();
        }
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      Integer();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void TraverseProjectionItem() throws ParseException {
 /*@bgen(jjtree) TraverseProjectionItem */
  OTraverseProjectionItem jjtn000 = new OTraverseProjectionItem(JJTTRAVERSEPROJECTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case LBRACKET:
      case IN:
      case KEY:
      case IDENTIFIER:
        BaseIdentifier();
        if (jj_2_75(2147483647)) {
          Modifier();
        } else {
          ;
        }
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Array() throws ParseException {
 /*@bgen(jjtree) Array */
  OArray jjtn000 = new OArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case NULL:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case THIS:
      case RECORD_ATTRIBUTE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case HOOK:
      case COLON:
      case MINUS:
      case IN:
      case KEY:
      case IDENTIFIER:
      case 141:
        Expression();
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[130] = jj_gen;
            break label_35;
          }
          jj_consume_token(COMMA);
          Expression();
        }
        break;
      default:
        jj_la1[131] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Json() throws ParseException {
 /*@bgen(jjtree) Json */
  OJson jjtn000 = new OJson(JJTJSON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TO:
      case VALUES:
      case SET:
      case ADD:
      case PUT:
      case MERGE:
      case CONTENT:
      case REMOVE:
      case ORDER:
      case GROUP:
      case OFFSET:
      case RECORD:
      case STRING_LITERAL:
      case IN:
      case KEY:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TO:
        case VALUES:
        case SET:
        case ADD:
        case PUT:
        case MERGE:
        case CONTENT:
        case REMOVE:
        case ORDER:
        case GROUP:
        case OFFSET:
        case RECORD:
        case IN:
        case KEY:
        case IDENTIFIER:
          Identifier();
          break;
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(COLON);
        Expression();
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[133] = jj_gen;
            break label_36;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TO:
          case VALUES:
          case SET:
          case ADD:
          case PUT:
          case MERGE:
          case CONTENT:
          case REMOVE:
          case ORDER:
          case GROUP:
          case OFFSET:
          case RECORD:
          case IN:
          case KEY:
          case IDENTIFIER:
            Identifier();
            break;
          case STRING_LITERAL:
            jj_consume_token(STRING_LITERAL);
            break;
          default:
            jj_la1[134] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(COLON);
          Expression();
        }
        break;
      default:
        jj_la1[135] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_3R_152() {
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(EDGE)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_182()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_3R_283()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(CONTENT)) return true;
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_3R_260()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(FETCHPLAN)) return true;
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(VALUES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_262()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(SKIP2)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(MATCHES)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(CONTAINSTEXT)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(CONTAINSALL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_51()) return true;
    if (jj_3R_139()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(CONTAINS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(DEFINED)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(DEFINED)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(VERTEX)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_145()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(KEY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(INSTANCEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_281()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(TRAVERSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_82()) return true;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_214()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(LOCK)) return true;
    if (jj_scan_token(RECORD)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_212()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_51()) return true;
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_51()) return true;
    if (jj_3R_145()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_82()) return true;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(CONTAINSVALUE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(CONTAINSKEY)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) jj_scanpos = xsp;
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(141)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_175()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(METADATA_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(CLUSTER_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    }
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_182()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(RECORD_ATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_174()) return true;
    if (jj_scan_token(RANGE)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public OrientSqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[136];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x83f88000,0x0,0x0,0x60,0x80,0x1000,0x0,0x0,0x0,0x0,0xa3f88000,0x10000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x83f88000,0x20000,0x0,0x10000,0x10000,0x83f88000,0x7f00000,0x2000,0x0,0xa3f88000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x4200000,0x0,0x0,0x7f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x83f88000,0x0,0x0,0x0,0x4000,0x20,0x1004020,0x0,0x0,0x1104020,0x1104020,0x83f88000,0x0,0x0,0x0,0x0,0x0,0x0,0x1104020,0x0,0x0,0x0,0x0,0x0,0xa3f88000,0x0,0x20000000,0x83f88000,0x0,0x83f88000,0x0,0x0,0xa3f88000,0x0,0x0,0xa3f88000,0x0,0x0,0x0,0x20000000,0x0,0x83f88000,0x0,0x0,0xa3f88020,0x83f88000,0x0,0x60,0x83f88000,0x0,0x10000000,0x8000000,0xa3f88000,0x0,0x83f88000,0x0,0xa3f88000,0x0,0xa3f88000,0x0,0xa3f88000,0x0,0x0,0x0,0x0,0x0,0x83f88000,0x0,0x0,0x0,0x83f88000,0x0,0x0,0x0,0x0,0x0,0x83f88000,0x0,0x83f88000,0x83f88000,0x0,0xa3f88000,0x83f88000,0x0,0x83f88000,0x83f88000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4011,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x80,0x200,0x22064011,0x0,0x0,0x1,0x4,0x18,0x1c,0x1c,0x200,0x2000,0x0,0x64011,0x0,0x4,0x0,0x0,0x2004011,0x0,0x0,0x1800,0x22064011,0x400,0x0,0x2000,0x4,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x4011,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x4011,0x0,0x2000000,0x2000000,0x0,0x2000000,0x2000000,0x0,0x10000,0x8000,0x0,0x0,0x80,0x22064011,0x0,0x20000000,0x2004011,0x0,0x22064011,0x0,0x0,0x22064011,0x0,0x0,0x22064011,0x20000,0x0,0x0,0x0,0x0,0x22064011,0x0,0x0,0x22064011,0x22064011,0x0,0x0,0x2004011,0x0,0x0,0x0,0x22064011,0x0,0x4011,0x0,0x22064011,0x0,0x22064011,0x0,0x22064011,0x0,0x0,0x0,0x0,0x0,0x2044011,0x140,0x140,0x0,0x2044011,0x140,0x140,0x0,0x18,0x0,0x4011,0x0,0x4011,0x64011,0x0,0x22064011,0x4011,0x0,0x4011,0x4011,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0xc00aec,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00aec,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x4000,0x0,0x4000,0x4000,0x0,0x20000,0x20000,0x4000,0x8,0x804,0x0,0x0,0x4000,0x4000,0x4000,0x0,0x0,0x80,0x0,0x0,0x80,0x80,0x0,0x4000,0x0,0x880,0x4000,0x0,0x880,0x80,0x0,0x0,0xc00000,0x4000,0x0,0xc00aec,0xa04,0x0,0xc00a0c,0x4000,0xc00890,0x8000,0x4000,0xc00aec,0x0,0x4000,0xc00aec,0x0,0x800,0x8000,0x0,0x4,0xae0,0x0,0x0,0xc00aec,0x800,0x4000,0x0,0x880,0x0,0x0,0x0,0xc00aec,0xf0e0000,0x8,0x4000,0xc00aec,0x4000,0xc00aec,0x4000,0xc00aec,0xf0e0000,0x4000,0xc00880,0x4000,0x880,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x4000,0x0,0x4000,0x0,0x8000,0x0,0x800,0x4000,0xc00aec,0x8,0x4000,0x8,0x8,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x800000,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800004,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x800006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e00,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800006,0x0,0x0,0x800000,0x0,0x800002,0x0,0x0,0x800002,0x4,0x0,0x800002,0x0,0x0,0x0,0x0,0x0,0x800002,0x3,0x8c,0x800002,0x800002,0x0,0x0,0x800000,0x0,0x0,0x0,0xc00002,0x21000000,0x800000,0x0,0x800002,0x0,0x800002,0x0,0x800002,0x25000000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x800004,0x0,0x800004,0x800004,0x0,0x800002,0x800000,0x0,0x800000,0x800000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x12,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2012,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x0,0x0,0x0,0x0,0x23f2,0x0,0x0,0x0,0x2012,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x3f2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x12,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x2012,0x0,0x0,0x2012,0x0,0x12,0x0,0x0,0x2012,0x0,0x0,0x2012,0x0,0x0,0x0,0x0,0x0,0x12,0x0,0x0,0x2012,0x12,0x0,0x0,0x27f2,0x1e0,0x0,0x0,0x2012,0x0,0x12,0x0,0x2012,0x0,0x2012,0x0,0x2012,0x0,0x0,0x0,0x0,0x0,0x2012,0x0,0x0,0x0,0x2012,0x0,0x0,0x0,0x0,0x0,0x12,0x0,0x12,0x12,0x0,0x2012,0x12,0x0,0x12,0x12,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[75];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public OrientSql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OrientSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OrientSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public OrientSql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OrientSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public OrientSql(OrientSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(OrientSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 136; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[142];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 136; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 142; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 75; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
