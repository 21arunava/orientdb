/* Generated By:JJTree: Do not edit this line. OFindReferencesStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class OFindReferencesStatement extends OStatement {
  protected ORid       rid;
  protected OStatement subQuery;

  //class or cluster
  protected List<SimpleNode> targets;

  public OFindReferencesStatement(int id) {
    super(id);
  }

  public OFindReferencesStatement(OrientSql p, int id) {
    super(p, id);

  }

  @Override public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("FIND REFERENCES ");
    if (rid != null) {
      rid.toString(params, builder);
    } else {
      builder.append(" ( ");
      subQuery.toString(params, builder);
      builder.append(" )");
    }
    if (targets != null) {
      builder.append(" [");
      boolean first = true;
      for (SimpleNode node : targets) {
        if (!first) {
          builder.append(",");
        }
        node.toString(params, builder);
        first = false;
      }
      builder.append("]");
    }
  }

  @Override public OFindReferencesStatement copy() {
    OFindReferencesStatement result = new OFindReferencesStatement(-1);
    result.rid = rid == null ? null : rid.copy();
    result.subQuery = subQuery == null ? null : subQuery.copy();
    result.targets = targets == null ? null : targets.stream().map(x -> x.copy()).collect(Collectors.toList());
    return result;
  }
}
/* JavaCC - OriginalChecksum=be781e05acef94aa5edd7438b4ead6d5 (do not edit this line) */
