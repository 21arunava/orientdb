/* Generated By:JJTree: Do not edit this line. OProjectionItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.record.OIdentifiable;
import com.orientechnologies.orient.core.sql.executor.OResult;

import java.util.Map;

public class OProjectionItem extends SimpleNode {

  protected boolean all = false;

  protected OIdentifier alias;

  protected OExpression expression;

  public OProjectionItem(int id) {
    super(id);
  }

  public OProjectionItem(OrientSql p, int id) {
    super(p, id);
  }

  /**
   * Accept the visitor.
   **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public boolean isAll() {
    if (all) {
      return true;
    }
    if (expression != null && "*".equals(expression.toString())) {
      return true;
    }
    return false;
  }

  public void setAll(boolean all) {
    this.all = all;
  }

  public OIdentifier getAlias() {
    return alias;
  }

  public void setAlias(OIdentifier alias) {
    this.alias = alias;
  }

  public OExpression getExpression() {
    return expression;
  }

  public void setExpression(OExpression expression) {
    this.expression = expression;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (all) {
      builder.append("*");
    } else {
      expression.toString(params, builder);
      if (alias != null) {

        builder.append(" AS ");
        alias.toString(params, builder);
      }
    }
  }

  public Object execute(OIdentifiable iCurrentRecord, OCommandContext ctx) {
    if (all) {
      return iCurrentRecord;
    }
    return expression.execute(iCurrentRecord, ctx);
  }

  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {
    if (all) {
      return iCurrentRecord;
    }
    return expression.execute(iCurrentRecord, ctx);
  }

  /**
   * returns the final alias for this projection item (the explicit alias, if defined, or the default alias)
   * @return the final alias for this projection item
   */
  public String getProjectionFieldAlias() {
    if (alias != null) {
      return alias.getStringValue();
    }
    return this.toString();
  }

  public boolean isExpand() {
    return expression.isExpand();
  }

  public OProjectionItem getExpandContent() {
    OProjectionItem result =new OProjectionItem(-1);
    result.setExpression(expression.getExpandContent());
    return result;
  }
}
/* JavaCC - OriginalChecksum=6d6010734c7434a6f516e2eac308e9ce (do not edit this line) */
