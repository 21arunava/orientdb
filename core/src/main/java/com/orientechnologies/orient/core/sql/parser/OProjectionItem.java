/* Generated By:JJTree: Do not edit this line. OProjectionItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal;
import com.orientechnologies.orient.core.db.record.OIdentifiable;

import java.util.Map;

public class OProjectionItem extends SimpleNode {

  protected boolean     all = false;

  protected String      alias;

  protected OExpression expression;

  public OProjectionItem(int id) {
    super(id);
  }

  public OProjectionItem(OrientSql p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(OrientSqlVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public boolean isAll() {
    if (all) {
      return true;
    }
    if (expression != null && "*".equals(expression.toString())) {
      return true;
    }
    return false;
  }

  public void setAll(boolean all) {
    this.all = all;
  }

  public String getAlias() {
    if(alias==null)
      return expression.getDefaultAlias();
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public OExpression getExpression() {
    return expression;
  }

  public void setExpression(OExpression expression) {
    this.expression = expression;
  }


  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (all) {
      builder.append("*");
    } else {
      expression.toString(params, builder);
      if (alias != null && alias.trim().length() > 0) {
        builder.append(" AS " + alias);
      }
    }
  }

  public String getDefaultAlias() {
    if (expression == null) {
      return "null";
    }
    return expression.getDefaultAlias();
  }

  public boolean isAggregate(OCommandContext ctx, ODatabaseDocumentInternal database){
    if(expression!=null){
      return expression.isAggregate();
    }
    return false;

  }

  public Object calculate(OIdentifiable targetRecord, OCommandContext ctx){
    return expression.execute(targetRecord, ctx);
  }
}
/* JavaCC - OriginalChecksum=6d6010734c7434a6f516e2eac308e9ce (do not edit this line) */
