package com.orientechnologies.orient.test.database.auto;

import com.orientechnologies.orient.core.db.OPartitionedDatabasePoolFactory;
import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import com.orientechnologies.orient.core.metadata.schema.OClass;
import com.orientechnologies.orient.core.metadata.schema.OSchema;
import com.orientechnologies.orient.core.metadata.schema.OType;
import com.orientechnologies.orient.core.record.impl.ODocument;
import com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * @author Matan Shukry (matanshukry@gmail.com)
 * @since 3/3/2015
 */
public class DefaultValuesTrivialTest {
    private static final int DOCUMENT_COUNT = 50;
    private final OPartitionedDatabasePoolFactory poolFactory = new OPartitionedDatabasePoolFactory();

    @Test
    public void test() throws Exception {
        final ODatabaseDocumentTx database = new ODatabaseDocumentTx("plocal:/temp/databases/defaultValues");

        if (database.exists()) {
            database.open("admin", "admin").drop();
        }

        database.create();

        // create example schema
        OSchema schema = database.getMetadata().getSchema();
        OClass classPerson = schema.createClass("Person");

        classPerson.createProperty("name", OType.STRING);
        classPerson.createProperty("join_date", OType.DATETIME).setDefaultValue("sysdate()");
        classPerson.createProperty("active", OType.BOOLEAN).setDefaultValue("true");

        Date dtStart = getDatabaseSysdate(database);

        ODocument[] docs = new ODocument[DOCUMENT_COUNT];
        for (int i = 0; i < DOCUMENT_COUNT; ++i) {
            ODocument doc = new ODocument("Person");
            doc.field("name", "autoGeneratedName #" + i);
            doc.save();

            docs[i] = doc;
        }

        Date dtAfter = getDatabaseSysdate(database);
        for (int i = 0; i < DOCUMENT_COUNT; ++i) {
            final ODocument doc = docs[i];

            try {
                //
                Date dt = doc.field("join_date", OType.DATETIME);

                boolean isInRange = (!dt.before(dtStart)) && (!dt.after(dtAfter));
                Assert.assertTrue(isInRange);

                //
                boolean active = doc.field("active", OType.BOOLEAN);
                Assert.assertTrue(active);
            } catch (Exception ex) {
                ex.printStackTrace();
                Assert.assertTrue(false);
            }
        }
    }

    public Date getDatabaseSysdate(ODatabaseDocumentTx database) {
        List<ODocument> dates = database.query(new OSQLSynchQuery<Date>("SELECT sysdate()"));
        return dates.get(0).field("sysdate");
    }
}