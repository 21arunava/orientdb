/*
 * Copyright 1999-2010 Luca Garulli (l.garulli--at--orientechnologies.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.orientechnologies.orient.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Collections;
import java.util.List;

import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import com.orientechnologies.orient.core.exception.OQueryParsingException;
import com.orientechnologies.orient.core.record.impl.ODocument;
import com.orientechnologies.orient.core.sql.query.OSQLQuery;
import com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;

public class OrientJdbcStatement implements Statement {
	private final OrientJdbcConnection connection;
	private final ODatabaseDocumentTx database;

	private OSQLQuery<ODocument> query;
	private List<ODocument> documents;

	public OrientJdbcStatement(final OrientJdbcConnection iConnection) {
		this.connection = iConnection;
		this.database = iConnection.getDatabase();
		documents = Collections.emptyList();
	}

	public boolean execute(final String sql) throws SQLException {
		if (query == null) query = new OSQLSynchQuery<ODocument>(sql);

		return true;
	}

	public ResultSet executeQuery(final String sql) throws SQLException {
		try {
			execute(sql);

			documents = database.command(query).execute();
			return new OrientJdbcResultSet(this, documents);

		} catch (OQueryParsingException e) {
			throw new SQLSyntaxErrorException("Error on parsing the query", e);
		}
	}

	public int executeUpdate(final String sql) throws SQLException {

		return 0;
	}

	public int executeUpdate(final String sql, int autoGeneratedKeys) throws SQLException {

		return 0;
	}

	public int executeUpdate(final String sql, int[] columnIndexes) throws SQLException {

		return 0;
	}

	public int executeUpdate(final String sql, String[] columnNames) throws SQLException {

		return 0;
	}

	public Connection getConnection() throws SQLException {
		return connection;
	}

	public void close() throws SQLException {
		query = null;
	}

	public boolean execute(final String sql, int autoGeneratedKeys) throws SQLException {
		return false;
	}

	public boolean execute(final String sql, int[] columnIndexes) throws SQLException {
		return false;
	}

	public boolean execute(final String sql, String[] columnNames) throws SQLException {
		return false;
	}

	public void addBatch(final String sql) throws SQLException {

	}

	public void cancel() throws SQLException {
	}

	public void clearBatch() throws SQLException {
	}

	public void clearWarnings() throws SQLException {
	}

	public int[] executeBatch() throws SQLException {
		return null;
	}

	public int getFetchDirection() throws SQLException {

		return 0;
	}

	public int getFetchSize() throws SQLException {

		return 0;
	}

	public ResultSet getGeneratedKeys() throws SQLException {

		return null;
	}

	public int getMaxFieldSize() throws SQLException {

		return 0;
	}

	public int getMaxRows() throws SQLException {

		return 0;
	}

	public boolean getMoreResults() throws SQLException {

		return false;
	}

	public boolean getMoreResults(final int current) throws SQLException {

		return false;
	}

	public int getQueryTimeout() throws SQLException {

		return 0;
	}

	public ResultSet getResultSet() throws SQLException {

		return null;
	}

	public int getResultSetConcurrency() throws SQLException {

		return 0;
	}

	public int getResultSetHoldability() throws SQLException {

		return 0;
	}

	public int getResultSetType() throws SQLException {

		return 0;
	}

	public int getUpdateCount() throws SQLException {

		return 0;
	}

	public SQLWarning getWarnings() throws SQLException {

		return null;
	}

	public boolean isClosed() throws SQLException {

		return false;
	}

	public boolean isPoolable() throws SQLException {

		return false;
	}

	public void setCursorName(final String name) throws SQLException {

	}

	public void setEscapeProcessing(final boolean enable) throws SQLException {

	}

	public void setFetchDirection(final int direction) throws SQLException {

	}

	public void setFetchSize(final int rows) throws SQLException {

	}

	public void setMaxFieldSize(final int max) throws SQLException {

	}

	public void setMaxRows(final int max) throws SQLException {

	}

	public void setPoolable(final boolean poolable) throws SQLException {

	}

	public void setQueryTimeout(final int seconds) throws SQLException {

	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {

		return false;
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {

		return null;
	}

}
